/*
Мама Васи хочет знать, что сын планирует делать и когда. Помогите ей: напишите функцию solution, определяющую индекс первого 
вхождения передаваемого ей на вход значения в связном списке, если значение присутствует.
Внимание: в этой задаче не нужно считывать входные данные. Нужно написать только функцию, которая принимает на вход голову 
списка и искомый элемент, а возвращает целое число — индекс найденного элемента или -1.

Формат ввода
Функция на вход принимает голову односвязного списка и элемент, который нужно найти. 
Длина списка не превосходит 10000 элементов. Список не бывает пустым.
Следуйте следующим правилам при отправке решений:

*По умолчанию выбран компилятор Make, выбор компилятора в данной задаче недоступен.
*Решение нужно отправлять в виде файла с расширением соответствующем вашему языку программирования.
*Для Java файл должен называться Solution.java, для C# – Solution.cs
*Для остальных языков программирования это имя использовать нельзя (имя «solution» тоже).
*Для Go укажите package main.

Формат вывода
Функция возвращает индекс первого вхождения искомого элемента в список(индексация начинается с нуля). 
Если элемент не найден, нужно вернуть -1.

Примечания
Решение нужно отправлять в виде файла с расширением соответствующем вашему языку программирования. 
Нужно выбирать компилятор make.
Для Java файл должен называться Solution.java
Для остальных языков программирования это имя использовать нельзя (имя solution тоже).
*/

/*
Comment it before submitting
*/
// class Node {  
//   constructor(value = null, next = null) {  
//     this.value = value;  
//     this.next = next;  
//   }  
// }


function solution(node, elem) {
    let nextNode = node;
    let index = 0;

    while(nextNode.next) {
        if(nextNode.value === elem) {
            return index;
        } else {
            nextNode = nextNode.next;
            index++
        }
    }

    if(nextNode.value === elem) {
        return index;
    } else {
        return -1;
    }

}

// function test() {
//     var node3 = new Node("node3");
//     var node2 = new Node("node2", node3);
//     var node1 = new Node("node1", node2);
//     var node0 = new Node("node0", node1);
//     var idx = solution(node0, "node2");
//     // result is idx === 2
// }

// test()